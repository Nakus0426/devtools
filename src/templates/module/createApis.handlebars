{{{commentText}}}
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array, alovaInstance, configMap) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      array.push(property);
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(array, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiItem = apiDefinitions[array.join('.')];
      if (!apiItem) {
        throw new Error(`the api path of \`${apiItem}\` is not found`);
      }
      const [method, url] = apiItem;
      const { pathParams, data } = config;
      const urlReplaced = url.replace(/\{([^}]+)\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete config.pathParams;
      return new Method(method.toUpperCase(), alovaInstance, urlReplaced, config, data);
    }
  });
};

export const createApis = (alovaInstance, configMap) =>
  new Proxy(
    {},
    {
      get(_, property) {
        return createFunctionalProxy([property], alovaInstance, configMap);
      }
    }
  );

/**
 * @typedef {Parameters<typeof import('./index')['alovaInstance']['Get']>[1]} GetConfig
 */
/**
 * @typedef {{#raw "{{ " }}{{/raw}}[apiPath in keyof typeof import('./apiDefinitions').default]?: NonNullable<GetConfig>{{#raw " }}" }}{{/raw}} MethodsConfigMap
 */
/**
 * @template {MethodsConfigMap} Config
 * @param {Config} config
 * @returns {Config}
 */
export const withConfigType = config => config;
