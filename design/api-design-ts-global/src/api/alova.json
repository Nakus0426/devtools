{
  "openapi": "3.0.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.7",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string"
                  },
                  "file": {
                    "description": "file to upload",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet/{petId}/uploadImage",
        "method": "post"
      }
    },
    "/pet": {
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet",
        "method": "post"
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet",
        "method": "put"
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["available", "pending", "sold"],
                "default": "available"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet/findByStatus",
        "method": "get"
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "deprecated": true,
        "url": "/pet/findByTags",
        "method": "get"
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "url": "/pet/{petId}",
        "method": "get"
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string"
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet/{petId}",
        "method": "post"
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet/{petId}",
        "method": "delete"
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "url": "/store/inventory",
        "method": "get"
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "order placed for purchasing the pet",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "url": "/store/order",
        "method": "post"
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "url": "/store/order/{orderId}",
        "method": "get"
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "url": "/store/order/{orderId}",
        "method": "delete"
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "url": "/user/createWithList",
        "method": "post"
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "url": "/user/{username}",
        "method": "get"
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "url": "/user/{username}",
        "method": "put"
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "url": "/user/{username}",
        "method": "delete"
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "url": "/user/login",
        "method": "get"
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "url": "/user/logout",
        "method": "get"
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "url": "/user/createWithArray",
        "method": "post"
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object",
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "url": "/user",
        "method": "post"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://petstore.swagger.io/v2"
    },
    {
      "url": "http://petstore.swagger.io/v2"
    }
  ],
  "components": {
    "requestBodies": {
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "List of user object",
        "required": true
      },
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "description": "Pet object that needs to be added to the store",
        "required": true
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          }
        }
      }
    },
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Pet": {
        "type": "object",
        "required": ["name", "photoUrls"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      }
    }
  },
  "baseUrl": "https://petstore.swagger.io/v2",
  "pathsArr": [
    {
      "key": "pet.uploadFile",
      "method": "POST",
      "path": "/pet/{petId}/uploadImage"
    },
    {
      "key": "pet.addPet",
      "method": "POST",
      "path": "/pet"
    },
    {
      "key": "pet.updatePet",
      "method": "PUT",
      "path": "/pet"
    },
    {
      "key": "pet.findPetsByStatus",
      "method": "GET",
      "path": "/pet/findByStatus"
    },
    {
      "key": "pet.findPetsByTags",
      "method": "GET",
      "path": "/pet/findByTags"
    },
    {
      "key": "pet.getPetById",
      "method": "GET",
      "path": "/pet/{petId}"
    },
    {
      "key": "pet.updatePetWithForm",
      "method": "POST",
      "path": "/pet/{petId}"
    },
    {
      "key": "pet.deletePet",
      "method": "DELETE",
      "path": "/pet/{petId}"
    },
    {
      "key": "store.getInventory",
      "method": "GET",
      "path": "/store/inventory"
    },
    {
      "key": "store.placeOrder",
      "method": "POST",
      "path": "/store/order"
    },
    {
      "key": "store.getOrderById",
      "method": "GET",
      "path": "/store/order/{orderId}"
    },
    {
      "key": "store.deleteOrder",
      "method": "DELETE",
      "path": "/store/order/{orderId}"
    },
    {
      "key": "user.createUsersWithListInput",
      "method": "POST",
      "path": "/user/createWithList"
    },
    {
      "key": "user.getUserByName",
      "method": "GET",
      "path": "/user/{username}"
    },
    {
      "key": "user.updateUser",
      "method": "PUT",
      "path": "/user/{username}"
    },
    {
      "key": "user.deleteUser",
      "method": "DELETE",
      "path": "/user/{username}"
    },
    {
      "key": "user.loginUser",
      "method": "GET",
      "path": "/user/login"
    },
    {
      "key": "user.logoutUser",
      "method": "GET",
      "path": "/user/logout"
    },
    {
      "key": "user.createUsersWithArrayInput",
      "method": "POST",
      "path": "/user/createWithArray"
    },
    {
      "key": "user.createUser",
      "method": "POST",
      "path": "/user"
    }
  ],
  "pathApis": [
    {
      "tag": "pet",
      "apis": [
        {
          "method": "POST",
          "summary": "uploads an image",
          "path": "/pet/{petId}/uploadImage",
          "name": "uploadFile",
          "responseName": "ApiResponse",
          "requestName": "{\n  additionalMetadata?: string;\n  file?: string;\n}",
          "pathKey": "pet.uploadFile",
          "pathParameters": [
            {
              "key": "petId",
              "description": "ID of pet to update",
              "type": "number",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": [
            {
              "key": "code?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "type?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "message?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            }
          ],
          "responseSchemaText": "{\r\n      *  code?: number\r\n      *  type?: string\r\n      *  message?: string\r\n      *}",
          "requestSchemaText": "{\r\n      *  // Additional data to pass to server\r\n      *  additionalMetadata?: string\r\n      *  // file to upload\r\n      *  file?: string\r\n      *}",
          "requestBody": [
            {
              "key": "additionalMetadata?",
              "description": "Additional data to pass to server",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "file?",
              "description": "file to upload",
              "type": "string",
              "required": false,
              "deprecated": false
            }
          ]
        },
        {
          "method": "POST",
          "summary": "Add a new pet to the store",
          "path": "/pet",
          "name": "addPet",
          "responseName": "unknown",
          "requestName": "Pet",
          "pathKey": "pet.addPet",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "{\r\n      *  id?: number\r\n      *  category?: {\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }\r\n      *  name?: string\r\n      *  photoUrls?: string[]\r\n      *  tags?: Array<{\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }>\r\n      *  // pet status in the store\r\n      *  status?: \"available\" | \"pending\" | \"sold\"\r\n      *}",
          "requestBody": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "category?",
              "description": "",
              "type": "Category",
              "required": false,
              "deprecated": false
            },
            {
              "key": "name?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "photoUrls?",
              "description": "",
              "type": "string[]",
              "required": false,
              "deprecated": false
            },
            {
              "key": "tags?",
              "description": "",
              "type": "any[]",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "pet status in the store",
              "type": "string",
              "required": false,
              "deprecated": false
            }
          ]
        },
        {
          "method": "PUT",
          "summary": "Update an existing pet",
          "path": "/pet",
          "name": "updatePet",
          "responseName": "unknown",
          "requestName": "Pet",
          "pathKey": "pet.updatePet",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "{\r\n      *  id?: number\r\n      *  category?: {\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }\r\n      *  name?: string\r\n      *  photoUrls?: string[]\r\n      *  tags?: Array<{\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }>\r\n      *  // pet status in the store\r\n      *  status?: \"available\" | \"pending\" | \"sold\"\r\n      *}",
          "requestBody": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "category?",
              "description": "",
              "type": "Category",
              "required": false,
              "deprecated": false
            },
            {
              "key": "name?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "photoUrls?",
              "description": "",
              "type": "string[]",
              "required": false,
              "deprecated": false
            },
            {
              "key": "tags?",
              "description": "",
              "type": "any[]",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "pet status in the store",
              "type": "string",
              "required": false,
              "deprecated": false
            }
          ]
        },
        {
          "method": "GET",
          "summary": "Finds Pets by status",
          "path": "/pet/findByStatus",
          "name": "findPetsByStatus",
          "responseName": "any[]",
          "requestName": "",
          "pathKey": "pet.findPetsByStatus",
          "pathParameters": [],
          "queryParameters": [
            {
              "key": "status",
              "description": "Status values that need to be considered for filter",
              "type": "string[]",
              "required": true,
              "deprecated": false
            }
          ],
          "response": {
            "type": "any[]"
          },
          "responseSchemaText": "Array<{\r\n      *  id?: number\r\n      *  category?: {\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }\r\n      *  name?: string\r\n      *  photoUrls?: string[]\r\n      *  tags?: Array<{\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }>\r\n      *  // pet status in the store\r\n      *  status?: \"available\" | \"pending\" | \"sold\"\r\n      *}>",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "GET",
          "summary": "Finds Pets by tags",
          "path": "/pet/findByTags",
          "name": "findPetsByTags",
          "responseName": "any[]",
          "requestName": "",
          "pathKey": "pet.findPetsByTags",
          "pathParameters": [],
          "queryParameters": [
            {
              "key": "tags",
              "description": "Tags to filter by",
              "type": "string[]",
              "required": true,
              "deprecated": false
            }
          ],
          "response": {
            "type": "any[]"
          },
          "responseSchemaText": "Array<{\r\n      *  id?: number\r\n      *  category?: {\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }\r\n      *  name?: string\r\n      *  photoUrls?: string[]\r\n      *  tags?: Array<{\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }>\r\n      *  // pet status in the store\r\n      *  status?: \"available\" | \"pending\" | \"sold\"\r\n      *}>",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "GET",
          "summary": "Find pet by ID",
          "path": "/pet/{petId}",
          "name": "getPetById",
          "responseName": "Pet",
          "requestName": "",
          "pathKey": "pet.getPetById",
          "pathParameters": [
            {
              "key": "petId",
              "description": "ID of pet to return",
              "type": "number",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "category?",
              "description": "",
              "type": "Category",
              "required": false,
              "deprecated": false
            },
            {
              "key": "name?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "photoUrls?",
              "description": "",
              "type": "string[]",
              "required": false,
              "deprecated": false
            },
            {
              "key": "tags?",
              "description": "",
              "type": "any[]",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "pet status in the store",
              "type": "string",
              "required": false,
              "deprecated": false
            }
          ],
          "responseSchemaText": "{\r\n      *  id?: number\r\n      *  category?: {\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }\r\n      *  name?: string\r\n      *  photoUrls?: string[]\r\n      *  tags?: Array<{\r\n      *    id?: number\r\n      *    name?: string\r\n      *  }>\r\n      *  // pet status in the store\r\n      *  status?: \"available\" | \"pending\" | \"sold\"\r\n      *}",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "POST",
          "summary": "Updates a pet in the store with form data",
          "path": "/pet/{petId}",
          "name": "updatePetWithForm",
          "responseName": "unknown",
          "requestName": "{\n  name?: string;\n  status?: string;\n}",
          "pathKey": "pet.updatePetWithForm",
          "pathParameters": [
            {
              "key": "petId",
              "description": "ID of pet that needs to be updated",
              "type": "number",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "{\r\n      *  // Updated name of the pet\r\n      *  name?: string\r\n      *  // Updated status of the pet\r\n      *  status?: string\r\n      *}",
          "requestBody": [
            {
              "key": "name?",
              "description": "Updated name of the pet",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "Updated status of the pet",
              "type": "string",
              "required": false,
              "deprecated": false
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Deletes a pet",
          "path": "/pet/{petId}",
          "name": "deletePet",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "pet.deletePet",
          "pathParameters": [
            {
              "key": "petId",
              "description": "Pet id to delete",
              "type": "number",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        }
      ]
    },
    {
      "tag": "store",
      "apis": [
        {
          "method": "GET",
          "summary": "Returns pet inventories by status",
          "path": "/store/inventory",
          "name": "getInventory",
          "responseName": "object",
          "requestName": "",
          "pathKey": "store.getInventory",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "object"
          },
          "responseSchemaText": "{\r\n      *}",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "POST",
          "summary": "Place an order for a pet",
          "path": "/store/order",
          "name": "placeOrder",
          "responseName": "Order",
          "requestName": "Order",
          "pathKey": "store.placeOrder",
          "pathParameters": [],
          "queryParameters": [],
          "response": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "petId?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "quantity?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "shipDate?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "Order Status",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "complete?",
              "description": "",
              "type": "boolean",
              "required": false,
              "deprecated": false
            }
          ],
          "responseSchemaText": "{\r\n      *  id?: number\r\n      *  petId?: number\r\n      *  quantity?: number\r\n      *  shipDate?: string\r\n      *  // Order Status\r\n      *  status?: \"placed\" | \"approved\" | \"delivered\"\r\n      *  complete?: boolean\r\n      *}",
          "requestSchemaText": "{\r\n      *  id?: number\r\n      *  petId?: number\r\n      *  quantity?: number\r\n      *  shipDate?: string\r\n      *  // Order Status\r\n      *  status?: \"placed\" | \"approved\" | \"delivered\"\r\n      *  complete?: boolean\r\n      *}",
          "requestBody": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "petId?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "quantity?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "shipDate?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "Order Status",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "complete?",
              "description": "",
              "type": "boolean",
              "required": false,
              "deprecated": false
            }
          ]
        },
        {
          "method": "GET",
          "summary": "Find purchase order by ID",
          "path": "/store/order/{orderId}",
          "name": "getOrderById",
          "responseName": "Order",
          "requestName": "",
          "pathKey": "store.getOrderById",
          "pathParameters": [
            {
              "key": "orderId",
              "description": "ID of pet that needs to be fetched",
              "type": "number",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "petId?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "quantity?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "shipDate?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "status?",
              "description": "Order Status",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "complete?",
              "description": "",
              "type": "boolean",
              "required": false,
              "deprecated": false
            }
          ],
          "responseSchemaText": "{\r\n      *  id?: number\r\n      *  petId?: number\r\n      *  quantity?: number\r\n      *  shipDate?: string\r\n      *  // Order Status\r\n      *  status?: \"placed\" | \"approved\" | \"delivered\"\r\n      *  complete?: boolean\r\n      *}",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "DELETE",
          "summary": "Delete purchase order by ID",
          "path": "/store/order/{orderId}",
          "name": "deleteOrder",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "store.deleteOrder",
          "pathParameters": [
            {
              "key": "orderId",
              "description": "ID of the order that needs to be deleted",
              "type": "number",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        }
      ]
    },
    {
      "tag": "user",
      "apis": [
        {
          "method": "POST",
          "summary": "Creates list of users with given input array",
          "path": "/user/createWithList",
          "name": "createUsersWithListInput",
          "responseName": "unknown",
          "requestName": "any[]",
          "pathKey": "user.createUsersWithListInput",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "Array<{\r\n      *  id?: number\r\n      *  username?: string\r\n      *  firstName?: string\r\n      *  lastName?: string\r\n      *  email?: string\r\n      *  password?: string\r\n      *  phone?: string\r\n      *  // User Status\r\n      *  userStatus?: number\r\n      *}>",
          "requestBody": {
            "type": "any[]"
          }
        },
        {
          "method": "GET",
          "summary": "Get user by user name",
          "path": "/user/{username}",
          "name": "getUserByName",
          "responseName": "User",
          "requestName": "",
          "pathKey": "user.getUserByName",
          "pathParameters": [
            {
              "key": "username",
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "type": "string",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "username?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "firstName?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "lastName?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "email?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "password?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "phone?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "userStatus?",
              "description": "User Status",
              "type": "number",
              "required": false,
              "deprecated": false
            }
          ],
          "responseSchemaText": "{\r\n      *  id?: number\r\n      *  username?: string\r\n      *  firstName?: string\r\n      *  lastName?: string\r\n      *  email?: string\r\n      *  password?: string\r\n      *  phone?: string\r\n      *  // User Status\r\n      *  userStatus?: number\r\n      *}",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "PUT",
          "summary": "Updated user",
          "path": "/user/{username}",
          "name": "updateUser",
          "responseName": "unknown",
          "requestName": "User",
          "pathKey": "user.updateUser",
          "pathParameters": [
            {
              "key": "username",
              "description": "name that need to be updated",
              "type": "string",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "{\r\n      *  id?: number\r\n      *  username?: string\r\n      *  firstName?: string\r\n      *  lastName?: string\r\n      *  email?: string\r\n      *  password?: string\r\n      *  phone?: string\r\n      *  // User Status\r\n      *  userStatus?: number\r\n      *}",
          "requestBody": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "username?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "firstName?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "lastName?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "email?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "password?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "phone?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "userStatus?",
              "description": "User Status",
              "type": "number",
              "required": false,
              "deprecated": false
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Delete user",
          "path": "/user/{username}",
          "name": "deleteUser",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "user.deleteUser",
          "pathParameters": [
            {
              "key": "username",
              "description": "The name that needs to be deleted",
              "type": "string",
              "required": true,
              "deprecated": false
            }
          ],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "GET",
          "summary": "Logs user into the system",
          "path": "/user/login",
          "name": "loginUser",
          "responseName": "string",
          "requestName": "",
          "pathKey": "user.loginUser",
          "pathParameters": [],
          "queryParameters": [
            {
              "key": "username",
              "description": "The user name for login",
              "type": "string",
              "required": true,
              "deprecated": false
            },
            {
              "key": "password",
              "description": "The password for login in clear text",
              "type": "string",
              "required": true,
              "deprecated": false
            }
          ],
          "response": {
            "type": "string"
          },
          "responseSchemaText": "string",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "GET",
          "summary": "Logs out current logged in user session",
          "path": "/user/logout",
          "name": "logoutUser",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "user.logoutUser",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "unknown",
          "requestBody": {
            "type": ""
          }
        },
        {
          "method": "POST",
          "summary": "Creates list of users with given input array",
          "path": "/user/createWithArray",
          "name": "createUsersWithArrayInput",
          "responseName": "unknown",
          "requestName": "any[]",
          "pathKey": "user.createUsersWithArrayInput",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "Array<{\r\n      *  id?: number\r\n      *  username?: string\r\n      *  firstName?: string\r\n      *  lastName?: string\r\n      *  email?: string\r\n      *  password?: string\r\n      *  phone?: string\r\n      *  // User Status\r\n      *  userStatus?: number\r\n      *}>",
          "requestBody": {
            "type": "any[]"
          }
        },
        {
          "method": "POST",
          "summary": "Create user",
          "path": "/user",
          "name": "createUser",
          "responseName": "unknown",
          "requestName": "User",
          "pathKey": "user.createUser",
          "pathParameters": [],
          "queryParameters": [],
          "response": {
            "type": "unknown"
          },
          "responseSchemaText": "unknown",
          "requestSchemaText": "{\r\n      *  id?: number\r\n      *  username?: string\r\n      *  firstName?: string\r\n      *  lastName?: string\r\n      *  email?: string\r\n      *  password?: string\r\n      *  phone?: string\r\n      *  // User Status\r\n      *  userStatus?: number\r\n      *}",
          "requestBody": [
            {
              "key": "id?",
              "description": "",
              "type": "number",
              "required": false,
              "deprecated": false
            },
            {
              "key": "username?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "firstName?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "lastName?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "email?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "password?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "phone?",
              "description": "",
              "type": "string",
              "required": false,
              "deprecated": false
            },
            {
              "key": "userStatus?",
              "description": "User Status",
              "type": "number",
              "required": false,
              "deprecated": false
            }
          ]
        }
      ]
    }
  ],
  "commentText": "/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Swagger Petstore - version 1.0.7\r\n *\r\n * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.\r\n *\r\n * OpenAPI version: 3.0.0\r\n *\r\n * Contact: \r\n *\r\n * NOTE: This file is auto generated by the alova's vscode plugin.\r\n *\r\n * https://alova.js.org/devtools/vscode\r\n *\r\n * **Do not edit the file manually.**\r\n */",
  "schemas": [
    "export interface ApiResponse {\n  code?: number;\n  type?: string;\n  message?: string;\n}\n",
    "export interface Category {\n  id?: number;\n  name?: string;\n}\n",
    "export interface Pet {\n  id?: number;\n  category?: Category;\n  name: string;\n  photoUrls: string[];\n  tags?: Tag[];\n  /**\n   * pet status in the store\n   */\n  status?: \"available\" | \"pending\" | \"sold\";\n}\nexport interface Category {\n  id?: number;\n  name?: string;\n}\nexport interface Tag {\n  id?: number;\n  name?: string;\n}\n",
    "export interface Tag {\n  id?: number;\n  name?: string;\n}\n",
    "export interface Order {\n  id?: number;\n  petId?: number;\n  quantity?: number;\n  shipDate?: string;\n  /**\n   * Order Status\n   */\n  status?: \"placed\" | \"approved\" | \"delivered\";\n  complete?: boolean;\n}\n",
    "export interface User {\n  id?: number;\n  username?: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  password?: string;\n  phone?: string;\n  /**\n   * User Status\n   */\n  userStatus?: number;\n}\n"
  ],
  "vue": true
}
