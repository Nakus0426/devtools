/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore - version 1.0.0
 * This is a sample server Petstore server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 * Contact: apiteam@swagger.io123
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 * https://github.com/alovajs/devtools.git
 * Do not edit the file manually.
 */
import { Alova, Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (
  array: (string | symbol)[],
  alovaInstance: Alova<any, any, any, any, any>,
  configMap: any
) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      array.push(property);
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(array, alovaInstance, configMap);
    },
    apply(_, __, [data, config]) {
      const apiItem = apiDefinitions[array.join('.')] as string[] | undefined;
      if (!apiItem) {
        throw new Error(`the api path of \`${apiItem}\` is not found`);
      }
      const [method, url] = apiItem;
      const urlReplaced = url.replace(/\{([^}]+)\}/g, (_, key) => {
        const pathParam = data[key];
        delete data[key];
        return pathParam;
      });
      // correct the params when request with different type
      if (/^POST|PUT|DELETE|PATCH$/i.test(method)) {
        config.params = data;
        data = undefined;
      }
      return new Method(method, alovaInstance, urlReplaced, config, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<any, any, any, any, any>, configMap: any) =>
  new Proxy(
    {},
    {
      get(_, property) {
        return createFunctionalProxy([property], alovaInstance, configMap);
      }
    }
  );
