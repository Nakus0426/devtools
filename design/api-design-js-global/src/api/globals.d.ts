/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore - version 1.0.0
 * This is a sample server Petstore server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 * Contact: apiteam@swagger.io123
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 * https://github.com/alovajs/devtools.git
 * Do not edit the file manually.
 */
import { Alova, AlovaMethodCreateConfig, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<any, any, infer RequestConfig, any, infer ResponseHeader>
    ? AlovaMethodCreateConfig<any, Responded, RequestConfig, ResponseHeader>
    : never;

// Extract the return type of transformData function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transformData'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transformData']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any> = undefined
> =
  CollapsedAlova extends Alova<infer State, infer Export, infer RequestConfig, infer Response, infer ResponseHeader>
    ? Method<
        State,
        Export,
        CurrentConfig extends undefined
          ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
          : CurrentConfig['transformData'] extends (...args: any[]) => any
            ? Awaited<ReturnType<CurrentConfig['transformData']>>
            : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
        any,
        RequestConfig,
        Response,
        ResponseHeader
      >
    : never;

interface LoginData {
  /**
   * 用户名
   */
  username: string;
  /**
   * 密码
   */
  password: string;
}
interface UserLoginResponse {
  /**
   * 是否登录成功
   */
  success: string;
}

/**
 * @title Pet category
 * @description A category for a pet
 */
export interface Category {
  id: number;
  name: string;
}
/**
 * @title Pet Tag
 * @description A tag for a pet
 */
export interface Tag {
  id: number;
  name: string;
}

/**
 * @title a Pet
 * @description A pet for sale in the pet store
 */
interface Pet {
  id: number;
  category: Category;
  /**
   * @example doggie
   */
  name: string;
  photoUrls: string[];
  tags: Tag[];
  /**
   * pet status in the store
   * @deprecated
   */
  status: 'available' | 'pending' | 'sold';
}

declare global {
  interface APIS {
    user: {
      /**
       * ---
       *
       * [POST]一个登录接口
       *
       * **path:** \/user\/login
       *
       * ---
       *
       * **request body**
       * ```ts
       * interface RequestBody {
       *   // 用户名
       *   username: string;
       *   // 密码
       *   password: string;
       * }
       * ```
       *
       * ---
       *
       * **Query parameters**
       * ```ts
       * interface QueryParameters {
       *   // 其他参数
       *   others: any;
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * interface Response {
       *   // 是否登录成功
       *   success: boolean;
       * }
       * ```
       */
      userLogin<Config extends Alova2MethodConfig<UserLoginResponse>>(
        data: LoginData,
        config?: Config
      ): Alova2Method<UserLoginResponse, 'user.userLogin', Config>;
    };

    pet: {
      /**
       * ---
       *
       * [GET]Find pet by ID
       *
       * **path:** \/pet\/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * interface PathParameters {
       *   // ID of pet to return
       *   // required: true
       *   petId: number;
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * interface Response {
       *   id: number;
       *   category: { // A category for a pet
       *     id: number;
       *     name: string;
       *   };
       *   name: string;
       *   photoUrls: string[];
       *   tags: { // A tag for a pet
       *     id: number;
       *     name: string;
       *   }[];
       *   // pet status in the store
       *   // [deprecated]
       *   status: 'available' | 'pending' | 'sold';
       * }
       * ```
       */
      getPetById<Config extends Alova2MethodConfig<UserLoginResponse> = undefined>(
        params: {
          /**
           * ID of pet to return
           */
          petId: number;
        },
        config?: Alova2MethodConfig<Pet>
      ): Alova2Method<Pet, 'pet.getPetById', Config>;
    };
  }

  var Apis: APIS;
}

// 这行代码确保 TypeScript 将其视为模块
export {};
