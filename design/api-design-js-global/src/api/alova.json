{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2"
    }
  ],
  "info": {
    "description": "This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "OpenAPI Petstore",
    "contact": {
      "name": "OpenAPI-Generator Contributors",
      "url": "https://github.com/OpenAPITools/openapi-generator",
      "email": "openapitools@googlegroups.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets"
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/pet": {
      "post": {
        "tags": ["tag"],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "增加pet2",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "url": "/pet",
        "method": "post"
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "externalDocs": {
          "url": "http://petstore.swagger.io/v2/doc/updatePet",
          "description": "API documentation for the updatePet operation"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "url": "/pet",
        "method": "put"
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "style": "form",
            "explode": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["available", "pending", "sold"],
                "default": "available"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": ["read:pets"]
          }
        ],
        "url": "/pet/findByStatus",
        "method": "get"
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": ["read:pets"]
          }
        ],
        "deprecated": true,
        "url": "/pet/findByTags",
        "method": "get"
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "title": "a Pet",
                  "description": "A pet for sale in the pet store",
                  "type": "object",
                  "required": ["name", "photoUrls"],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "title": "Pet category",
                      "description": "A category for a pet",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string",
                          "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
                        }
                      },
                      "xml": {
                        "name": "Category"
                      }
                    },
                    "name": {
                      "type": "string",
                      "example": "doggie"
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "title": "Pet Tag",
                        "description": "A tag for a pet",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Tag"
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "deprecated": true,
                      "enum": ["available", "pending", "sold"]
                    },
                    "test": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "url": "/pet/{petId}",
        "method": "get"
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string"
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "url": "/pet/{petId}",
        "method": "post"
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "url": "/pet/{petId}",
        "method": "delete"
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "An uploaded response",
                  "description": "Describes the result of uploading an image resource",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "test": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string"
                  },
                  "file": {
                    "description": "file to upload",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "url": "/pet/{petId}/uploadImage",
        "method": "post"
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "url": "/store/inventory",
        "method": "get"
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "order placed for purchasing the pet",
          "required": true
        },
        "url": "/store/order",
        "method": "post"
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "title": "Pet Order",
                  "description": "An order for a pets from the pet store",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "petId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "quantity": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "shipDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string",
                      "description": "Order Status",
                      "enum": ["placed", "approved", "delivered"]
                    },
                    "complete": {
                      "type": "boolean",
                      "default": false
                    },
                    "test": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "Order"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "url": "/store/order/{orderId}",
        "method": "get"
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "url": "/store/order/{orderId}",
        "method": "delete"
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object",
          "required": true
        },
        "url": "/user",
        "method": "post"
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "url": "/user/createWithArray",
        "method": "post"
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "url": "/user/createWithList",
        "method": "post"
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "Set-Cookie": {
                "description": "Cookie authentication key for use with the `api_key` apiKey authentication.",
                "schema": {
                  "type": "string",
                  "example": "AUTH_KEY=abcde12345; Path=/; HttpOnly"
                }
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "url": "/user/login",
        "method": "get"
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "url": "/user/logout",
        "method": "get"
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "title": "a User",
                  "description": "A User who is purchasing from the pet store",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    },
                    "test": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "url": "/user/{username}",
        "method": "get"
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        },
        "url": "/user/{username}",
        "method": "put"
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "url": "/user/{username}",
        "method": "delete"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "components": {
    "requestBodies": {
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "List of user object",
        "required": true
      },
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "description": "Pet object that needs to be added to the store",
        "required": true
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "schemas": {
      "Order": {
        "title": "Pet Order",
        "description": "An order for a pets from the pet store",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "title": "Pet category",
        "description": "A category for a pet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "title": "a User",
        "description": "A User who is purchasing from the pet store",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "title": "Pet Tag",
        "description": "A tag for a pet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "title": "a Pet",
        "description": "A pet for sale in the pet store",
        "type": "object",
        "required": ["name", "photoUrls"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "deprecated": true,
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "ApiResponse": {
        "title": "An uploaded response",
        "description": "Describes the result of uploading an image resource",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  },
  "baseUrl": "http://petstore.swagger.io/v2",
  "pathsArr": [
    {
      "key": "tag.增加pet2",
      "method": "POST",
      "path": "/pet"
    },
    {
      "key": "pet.updatePet",
      "method": "PUT",
      "path": "/pet"
    },
    {
      "key": "pet.findPetsByStatus",
      "method": "GET",
      "path": "/pet/findByStatus"
    },
    {
      "key": "pet.findPetsByTags",
      "method": "GET",
      "path": "/pet/findByTags"
    },
    {
      "key": "pet.getPetById",
      "method": "GET",
      "path": "/pet/{petId}"
    },
    {
      "key": "pet.updatePetWithForm",
      "method": "POST",
      "path": "/pet/{petId}"
    },
    {
      "key": "pet.deletePet",
      "method": "DELETE",
      "path": "/pet/{petId}"
    },
    {
      "key": "pet.uploadFile",
      "method": "POST",
      "path": "/pet/{petId}/uploadImage"
    },
    {
      "key": "store.getInventory",
      "method": "GET",
      "path": "/store/inventory"
    },
    {
      "key": "store.placeOrder",
      "method": "POST",
      "path": "/store/order"
    },
    {
      "key": "store.getOrderById",
      "method": "GET",
      "path": "/store/order/{orderId}"
    },
    {
      "key": "store.deleteOrder",
      "method": "DELETE",
      "path": "/store/order/{orderId}"
    },
    {
      "key": "user.createUser",
      "method": "POST",
      "path": "/user"
    },
    {
      "key": "user.createUsersWithArrayInput",
      "method": "POST",
      "path": "/user/createWithArray"
    },
    {
      "key": "user.createUsersWithListInput",
      "method": "POST",
      "path": "/user/createWithList"
    },
    {
      "key": "user.loginUser",
      "method": "GET",
      "path": "/user/login"
    },
    {
      "key": "user.logoutUser",
      "method": "GET",
      "path": "/user/logout"
    },
    {
      "key": "user.getUserByName",
      "method": "GET",
      "path": "/user/{username}"
    },
    {
      "key": "user.updateUser",
      "method": "PUT",
      "path": "/user/{username}"
    },
    {
      "key": "user.deleteUser",
      "method": "DELETE",
      "path": "/user/{username}"
    }
  ],
  "pathApis": [
    {
      "tag": "tag",
      "apis": [
        {
          "method": "POST",
          "summary": "Add a new pet to the store",
          "path": "/pet",
          "name": "增加pet2",
          "responseName": "Pet",
          "requestName": "Pet",
          "pathKey": "tag.增加pet2",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*}",
          "requestComment": "{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*}"
        }
      ]
    },
    {
      "tag": "pet",
      "apis": [
        {
          "method": "PUT",
          "summary": "Update an existing pet",
          "path": "/pet",
          "name": "updatePet",
          "responseName": "Pet",
          "requestName": "Pet",
          "pathKey": "pet.updatePet",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*}",
          "requestComment": "{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*}"
        },
        {
          "method": "GET",
          "summary": "Finds Pets by status",
          "path": "/pet/findByStatus",
          "name": "findPetsByStatus",
          "responseName": "Pet[]",
          "requestName": "",
          "pathKey": "pet.findPetsByStatus",
          "queryParameters": "{\n  /**\n   * Status values that need to be considered for filter\n   * [required]\n   * [deprecated]\n   */\n  status: ('available' | 'pending' | 'sold')[]\n}",
          "queryParametersComment": "{\n       *   // Status values that need to be considered for filter\n       *   // [required]\n       *   // [deprecated]\n       *   status: ('available' | 'pending' | 'sold')[]\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "Array<{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*}>",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Finds Pets by tags",
          "path": "/pet/findByTags",
          "name": "findPetsByTags",
          "responseName": "Pet[]",
          "requestName": "",
          "pathKey": "pet.findPetsByTags",
          "queryParameters": "{\n  /**\n   * Tags to filter by\n   * [required]\n   */\n  tags: string[]\n}",
          "queryParametersComment": "{\n       *   // Tags to filter by\n       *   // [required]\n       *   tags: string[]\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "Array<{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*}>",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Find pet by ID",
          "path": "/pet/{petId}",
          "name": "getPetById",
          "responseName": "{\n  id?: number\n  /**\n   * A category for a pet\n   */\n  category?: {\n    id?: number\n    name?: string\n  }\n  /**\n   * [required]\n   */\n  name: string\n  /**\n   * [required]\n   */\n  photoUrls: string[]\n  tags?: Array<{\n    id?: number\n    name?: string\n    type?: unknown\n  }>\n  /**\n   * pet status in the store\n   * [deprecated]\n   */\n  status?: 'available' | 'pending' | 'sold'\n  test?: string\n}",
          "requestName": "",
          "pathKey": "pet.getPetById",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * ID of pet to return\n   * [required]\n   */\n  petId: number\n}",
          "pathParametersComment": "{\n       *   // ID of pet to return\n       *   // [required]\n       *   petId: number\n       * }",
          "responseComment": "{\n*  id?: number\n*  // A category for a pet\n*  category?: {\n*    id?: number\n*    name?: string\n*  }\n*  // [required]\n*  name: string\n*  // [required]\n*  photoUrls: string[]\n*  tags?: Array<{\n*    id?: number\n*    name?: string\n*  }>\n*  // pet status in the store\n*  // [deprecated]\n*  status?: 'available' | 'pending' | 'sold'\n*  test?: string\n*}",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Updates a pet in the store with form data",
          "path": "/pet/{petId}",
          "name": "updatePetWithForm",
          "responseName": "unknown",
          "requestName": "{\n  /**\n   * Updated name of the pet\n   */\n  name?: string\n  /**\n   * Updated status of the pet\n   */\n  status?: string\n}",
          "pathKey": "pet.updatePetWithForm",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * ID of pet that needs to be updated\n   * [required]\n   */\n  petId: number\n}",
          "pathParametersComment": "{\n       *   // ID of pet that needs to be updated\n       *   // [required]\n       *   petId: number\n       * }",
          "responseComment": "unknown",
          "requestComment": "{\n*  // Updated name of the pet\n*  name?: string\n*  // Updated status of the pet\n*  status?: string\n*}"
        },
        {
          "method": "DELETE",
          "summary": "Deletes a pet",
          "path": "/pet/{petId}",
          "name": "deletePet",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "pet.deletePet",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * Pet id to delete\n   * [required]\n   */\n  petId: number\n}",
          "pathParametersComment": "{\n       *   // Pet id to delete\n       *   // [required]\n       *   petId: number\n       * }",
          "responseComment": "unknown",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "uploads an image",
          "path": "/pet/{petId}/uploadImage",
          "name": "uploadFile",
          "responseName": "{\n  code?: number\n  type?: string\n  message?: string\n  test?: string\n}",
          "requestName": "{\n  /**\n   * Additional data to pass to server\n   */\n  additionalMetadata?: string\n  /**\n   * file to upload\n   */\n  file?: string\n}",
          "pathKey": "pet.uploadFile",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * ID of pet to update\n   * [required]\n   */\n  petId: number\n}",
          "pathParametersComment": "{\n       *   // ID of pet to update\n       *   // [required]\n       *   petId: number\n       * }",
          "responseComment": "{\n*  code?: number\n*  type?: string\n*  message?: string\n*  test?: string\n*}",
          "requestComment": "{\n*  // Additional data to pass to server\n*  additionalMetadata?: string\n*  // file to upload\n*  file?: string\n*}"
        }
      ]
    },
    {
      "tag": "store",
      "apis": [
        {
          "method": "GET",
          "summary": "Returns pet inventories by status",
          "path": "/store/inventory",
          "name": "getInventory",
          "responseName": "object",
          "requestName": "",
          "pathKey": "store.getInventory",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Place an order for a pet",
          "path": "/store/order",
          "name": "placeOrder",
          "responseName": "Order",
          "requestName": "Order",
          "pathKey": "store.placeOrder",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "{\n*  id?: number\n*  petId?: number\n*  quantity?: number\n*  shipDate?: string\n*  // Order Status\n*  status?: 'placed' | 'approved' | 'delivered'\n*  complete?: boolean\n*}",
          "requestComment": "{\n*  id?: number\n*  petId?: number\n*  quantity?: number\n*  shipDate?: string\n*  // Order Status\n*  status?: 'placed' | 'approved' | 'delivered'\n*  complete?: boolean\n*}"
        },
        {
          "method": "GET",
          "summary": "Find purchase order by ID",
          "path": "/store/order/{orderId}",
          "name": "getOrderById",
          "responseName": "{\n  id?: number\n  petId?: number\n  quantity?: number\n  shipDate?: string\n  /**\n   * Order Status\n   */\n  status?: 'placed' | 'approved' | 'delivered'\n  complete?: boolean\n  test?: string\n}",
          "requestName": "",
          "pathKey": "store.getOrderById",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * ID of pet that needs to be fetched\n   * [required]\n   */\n  orderId: number\n}",
          "pathParametersComment": "{\n       *   // ID of pet that needs to be fetched\n       *   // [required]\n       *   orderId: number\n       * }",
          "responseComment": "{\n*  id?: number\n*  petId?: number\n*  quantity?: number\n*  shipDate?: string\n*  // Order Status\n*  status?: 'placed' | 'approved' | 'delivered'\n*  complete?: boolean\n*  test?: string\n*}",
          "requestComment": ""
        },
        {
          "method": "DELETE",
          "summary": "Delete purchase order by ID",
          "path": "/store/order/{orderId}",
          "name": "deleteOrder",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "store.deleteOrder",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * ID of the order that needs to be deleted\n   * [required]\n   */\n  orderId: string\n}",
          "pathParametersComment": "{\n       *   // ID of the order that needs to be deleted\n       *   // [required]\n       *   orderId: string\n       * }",
          "responseComment": "unknown",
          "requestComment": ""
        }
      ]
    },
    {
      "tag": "user",
      "apis": [
        {
          "method": "POST",
          "summary": "Create user",
          "path": "/user",
          "name": "createUser",
          "responseName": "unknown",
          "requestName": "User",
          "pathKey": "user.createUser",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "unknown",
          "requestComment": "{\n*  id?: number\n*  username?: string\n*  firstName?: string\n*  lastName?: string\n*  email?: string\n*  password?: string\n*  phone?: string\n*  // User Status\n*  userStatus?: number\n*}"
        },
        {
          "method": "POST",
          "summary": "Creates list of users with given input array",
          "path": "/user/createWithArray",
          "name": "createUsersWithArrayInput",
          "responseName": "unknown",
          "requestName": "User[]",
          "pathKey": "user.createUsersWithArrayInput",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "unknown",
          "requestComment": "Array<{\n*  id?: number\n*  username?: string\n*  firstName?: string\n*  lastName?: string\n*  email?: string\n*  password?: string\n*  phone?: string\n*  // User Status\n*  userStatus?: number\n*}>"
        },
        {
          "method": "POST",
          "summary": "Creates list of users with given input array",
          "path": "/user/createWithList",
          "name": "createUsersWithListInput",
          "responseName": "unknown",
          "requestName": "User[]",
          "pathKey": "user.createUsersWithListInput",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "unknown",
          "requestComment": "Array<{\n*  id?: number\n*  username?: string\n*  firstName?: string\n*  lastName?: string\n*  email?: string\n*  password?: string\n*  phone?: string\n*  // User Status\n*  userStatus?: number\n*}>"
        },
        {
          "method": "GET",
          "summary": "Logs user into the system",
          "path": "/user/login",
          "name": "loginUser",
          "responseName": "string",
          "requestName": "",
          "pathKey": "user.loginUser",
          "queryParameters": "{\n  /**\n   * The user name for login\n   * [required]\n   */\n  username: string\n  /**\n   * The password for login in clear text\n   * [required]\n   */\n  password: string\n}",
          "queryParametersComment": "{\n       *   // The user name for login\n       *   // [required]\n       *   username: string\n       *   // The password for login in clear text\n       *   // [required]\n       *   password: string\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Logs out current logged in user session",
          "path": "/user/logout",
          "name": "logoutUser",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "user.logoutUser",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "unknown",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Get user by user name",
          "path": "/user/{username}",
          "name": "getUserByName",
          "responseName": "{\n  id?: number\n  username?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  password?: string\n  phone?: string\n  /**\n   * User Status\n   */\n  userStatus?: number\n  test?: string\n}",
          "requestName": "",
          "pathKey": "user.getUserByName",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * The name that needs to be fetched. Use user1 for testing.\n   * [required]\n   */\n  username: string\n}",
          "pathParametersComment": "{\n       *   // The name that needs to be fetched. Use user1 for testing.\n       *   // [required]\n       *   username: string\n       * }",
          "responseComment": "{\n*  id?: number\n*  username?: string\n*  firstName?: string\n*  lastName?: string\n*  email?: string\n*  password?: string\n*  phone?: string\n*  // User Status\n*  userStatus?: number\n*  test?: string\n*}",
          "requestComment": ""
        },
        {
          "method": "PUT",
          "summary": "Updated user",
          "path": "/user/{username}",
          "name": "updateUser",
          "responseName": "unknown",
          "requestName": "User",
          "pathKey": "user.updateUser",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * name that need to be deleted\n   * [required]\n   */\n  username: string\n}",
          "pathParametersComment": "{\n       *   // name that need to be deleted\n       *   // [required]\n       *   username: string\n       * }",
          "responseComment": "unknown",
          "requestComment": "{\n*  id?: number\n*  username?: string\n*  firstName?: string\n*  lastName?: string\n*  email?: string\n*  password?: string\n*  phone?: string\n*  // User Status\n*  userStatus?: number\n*}"
        },
        {
          "method": "DELETE",
          "summary": "Delete user",
          "path": "/user/{username}",
          "name": "deleteUser",
          "responseName": "unknown",
          "requestName": "",
          "pathKey": "user.deleteUser",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * The name that needs to be deleted\n   * [required]\n   */\n  username: string\n}",
          "pathParametersComment": "{\n       *   // The name that needs to be deleted\n       *   // [required]\n       *   username: string\n       * }",
          "responseComment": "unknown",
          "requestComment": ""
        }
      ]
    }
  ],
  "commentText": "/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * OpenAPI Petstore - version 1.0.0\r\n *\r\n * This is a sample server Petstore server. For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.\r\n *\r\n * OpenAPI version: 3.0.0\r\n *\r\n * Contact: \r\n *\r\n * NOTE: This file is auto generated by the alova's vscode plugin.\r\n *\r\n * https://alova.js.org/devtools/vscode\r\n *\r\n * **Do not edit the file manually.**\r\n */",
  "schemas": [
    "/**\n * Pet Order\n * ---\n * An order for a pets from the pet store\n */\nexport interface Order {\n  id?: number;\n  petId?: number;\n  quantity?: number;\n  shipDate?: string;\n  /**\n   * Order Status\n   */\n  status?: \"placed\" | \"approved\" | \"delivered\";\n  complete?: boolean;\n}\n",
    "/**\n * Pet category\n * ---\n * A category for a pet\n */\nexport interface Category {\n  id?: number;\n  name?: string;\n}\n",
    "/**\n * a User\n * ---\n * A User who is purchasing from the pet store\n */\nexport interface User {\n  id?: number;\n  username?: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  password?: string;\n  phone?: string;\n  /**\n   * User Status\n   */\n  userStatus?: number;\n}\n",
    "/**\n * Pet Tag\n * ---\n * A tag for a pet\n */\nexport interface Tag {\n  id?: number;\n  name?: string;\n}\n",
    "/**\n * a Pet\n * ---\n * A pet for sale in the pet store\n */\nexport interface Pet {\n  id?: number;\n  category?: Category;\n  name: string;\n  photoUrls: string[];\n  tags?: Tag[];\n  /**\n   * @deprecated\n   * pet status in the store\n   */\n  status?: \"available\" | \"pending\" | \"sold\";\n}\n",
    "/**\n * An uploaded response\n * ---\n * Describes the result of uploading an image resource\n */\nexport interface ApiResponse {\n  code?: number;\n  type?: string;\n  message?: string;\n}\n"
  ],
  "vue": true
}
