{
  "openapi": "3.0.1",
  "info": {
    "title": "Swagger Generator",
    "description": "This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.57"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "tags": [
    {
      "name": "clients"
    },
    {
      "name": "servers"
    },
    {
      "name": "documentation"
    },
    {
      "name": "config"
    }
  ],
  "paths": {
    "/generate": {
      "get": {
        "tags": ["clients", "servers", "documentation", "config"],
        "summary": "Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.",
        "operationId": "generateFromURL",
        "parameters": [
          {
            "name": "codegenOptionsURL",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/generate",
        "method": "get"
      },
      "post": {
        "tags": ["clients", "servers", "documentation", "config"],
        "summary": "Generates and download code. GenerationRequest input provided as request body.",
        "operationId": "generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/generate",
        "method": "post"
      }
    },
    "/clients": {
      "get": {
        "tags": ["clients", "documentation"],
        "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)",
        "operationId": "clientLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "name": "clientOnly",
            "in": "query",
            "description": "flag to only return languages of type `client`",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/clients",
        "method": "get"
      }
    },
    "/servers": {
      "get": {
        "tags": ["servers"],
        "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)",
        "operationId": "serverLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/servers",
        "method": "get"
      }
    },
    "/documentation": {
      "get": {
        "tags": ["documentation"],
        "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)",
        "operationId": "documentationLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/documentation",
        "method": "get"
      }
    },
    "/{type}/{version}": {
      "get": {
        "tags": ["clients", "servers", "documentation", "config"],
        "summary": "List generator languages of the given type and version",
        "operationId": "languages",
        "parameters": [
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "name": "version",
            "in": "path",
            "description": "generator version used by codegen engine",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["V2", "V3"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/{type}/{version}",
        "method": "get"
      }
    },
    "/types": {
      "get": {
        "tags": ["clients", "servers", "documentation", "config"],
        "summary": "List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages",
        "operationId": "languagesMulti",
        "parameters": [
          {
            "$ref": "#/components/parameters/types"
          },
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/types",
        "method": "get"
      }
    },
    "/options": {
      "get": {
        "tags": ["clients", "servers", "documentation", "config"],
        "summary": "Returns options for a given language and version (defaults to V3)",
        "operationId": "listOptions",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CliOption"
                  }
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/options",
        "method": "get"
      }
    },
    "/model": {
      "post": {
        "tags": ["clients", "servers", "documentation", "config"],
        "summary": "Generates the intermediate model (\"bundle\") and returns it as a JSON. body.",
        "operationId": "generateBundle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/model",
        "method": "post"
      }
    },
    "/render": {
      "post": {
        "tags": ["documentation"],
        "summary": "render a template using the provided data",
        "operationId": "renderTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-swagger-router-controller": "io.swagger.v3.generator.online.GeneratorController",
        "url": "/render",
        "method": "post"
      }
    }
  },
  "components": {
    "schemas": {
      "GenerationRequest": {
        "required": ["lang"],
        "type": "object",
        "properties": {
          "lang": {
            "title": "language",
            "type": "string",
            "description": "language to generate (required)",
            "example": "java"
          },
          "spec": {
            "type": "object",
            "description": "spec in json format. . Alternative to `specURL`"
          },
          "specURL": {
            "type": "string",
            "description": "URL of the spec in json format. Alternative to `spec`"
          },
          "type": {
            "type": "string",
            "description": "type of the spec",
            "enum": ["CLIENT", "SERVER", "DOCUMENTATION", "CONFIG"]
          },
          "codegenVersion": {
            "type": "string",
            "description": "codegen version to use",
            "enum": ["V2", "V3"]
          },
          "options": {
            "$ref": "#/components/schemas/Options"
          }
        },
        "x-swagger-router-model": "io.swagger.codegen.v3.service.GenerationRequest"
      },
      "AuthorizationValue": {
        "title": "authorization",
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Authorization value"
          },
          "keyName": {
            "type": "string",
            "description": "Authorization key"
          },
          "type": {
            "type": "string",
            "description": "Authorization type",
            "enum": ["query", "header"]
          }
        },
        "description": "adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object",
        "x-swagger-router-model": "io.swagger.v3.parser.core.models.AuthorizationValue"
      },
      "Options": {
        "type": "object",
        "properties": {
          "auth": {
            "title": "authorization",
            "type": "string",
            "description": "adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values"
          },
          "authorizationValue": {
            "$ref": "#/components/schemas/AuthorizationValue"
          },
          "apiPackage": {
            "title": "api package",
            "type": "string",
            "description": "package for generated api classes"
          },
          "templateVersion": {
            "title": "Template Version",
            "type": "string",
            "description": "template version for generation"
          },
          "modelPackage": {
            "title": "model package",
            "type": "string",
            "description": "package for generated models"
          },
          "modelNamePrefix": {
            "title": "model name prefix",
            "type": "string",
            "description": "Prefix that will be prepended to all model names. Default is the empty string."
          },
          "modelNameSuffix": {
            "title": "model name suffix",
            "type": "string",
            "description": "PrefixSuffix that will be appended to all model names. Default is the empty string."
          },
          "systemProperties": {
            "title": "System Properties",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "sets specified system properties in key/value format"
          },
          "instantiationTypes": {
            "title": "instantiation types",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code."
          },
          "typeMappings": {
            "title": "type mappings",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String."
          },
          "additionalProperties": {
            "title": "additional properties",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "description": "sets additional properties that can be referenced by the mustache templates in key/value format."
          },
          "languageSpecificPrimitives": {
            "title": "language specific primitives",
            "type": "array",
            "description": "specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.",
            "items": {
              "type": "string"
            }
          },
          "importMappings": {
            "title": "import mappings",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "specifies mappings between a given class and the import that should be used for that class in key/value format."
          },
          "invokerPackage": {
            "title": "invoker package",
            "type": "string",
            "description": "root package for generated code"
          },
          "groupId": {
            "title": "group id",
            "type": "string",
            "description": "groupId in generated pom.xml"
          },
          "artifactId": {
            "title": "artifact id",
            "type": "string",
            "description": "artifactId in generated pom.xml"
          },
          "artifactVersion": {
            "title": "artifact version",
            "type": "string",
            "description": "artifact version generated in pom.xml"
          },
          "library": {
            "title": "library",
            "type": "string",
            "description": "library template (sub-template)"
          },
          "gitUserId": {
            "title": "git user id",
            "type": "string",
            "description": "Git user ID, e.g. swagger-api."
          },
          "gitRepoId": {
            "title": "git repo id",
            "type": "string",
            "description": "Git repo ID, e.g. swagger-codegen."
          },
          "releaseNote": {
            "title": "release note",
            "type": "string",
            "description": "Release note, default to 'Minor update'."
          },
          "httpUserAgent": {
            "title": "http user agent",
            "type": "string",
            "description": "HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'"
          },
          "reservedWordsMappings": {
            "title": "reserved words mappings",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier."
          },
          "ignoreFileOverride": {
            "title": "ignore file override location",
            "type": "string",
            "description": "Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation."
          },
          "removeOperationIdPrefix": {
            "title": "remove prefix of the operationId",
            "type": "boolean",
            "description": "Remove prefix of operationId, e.g. config_getId => getId"
          },
          "skipOverride": {
            "type": "boolean"
          }
        },
        "x-swagger-router-model": "io.swagger.codegen.v3.service.Options"
      },
      "CliOption": {
        "type": "object",
        "properties": {
          "optionName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Data type is based on the types supported by the JSON-Schema"
          },
          "enum": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "default": {
            "type": "string"
          }
        }
      },
      "RenderRequest": {
        "required": ["context", "template"],
        "type": "object",
        "properties": {
          "template": {
            "title": "template",
            "type": "string",
            "description": "template as string",
            "example": "{{!mustache}}"
          },
          "context": {
            "title": "context",
            "type": "string",
            "description": "context as string",
            "example": "{}"
          }
        },
        "x-swagger-router-model": "io.swagger.codegen.v3.service.RenderRequest"
      },
      "RenderResponse": {
        "required": ["value"],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "x-swagger-router-model": "io.swagger.codegen.v3.service.RenderResponse"
      }
    },
    "parameters": {
      "version": {
        "name": "version",
        "in": "query",
        "description": "generator version used by codegen engine",
        "schema": {
          "type": "string",
          "enum": ["V2", "V3"]
        }
      },
      "type": {
        "name": "type",
        "in": "path",
        "description": "generator type",
        "required": true,
        "schema": {
          "type": "string",
          "enum": ["client", "server", "documentation", "config"]
        }
      },
      "types": {
        "name": "types",
        "in": "query",
        "description": "comma-separated list of generator types",
        "required": true,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["client", "server", "documentation", "config"]
          }
        }
      }
    }
  },
  "baseUrl": "/api",
  "pathsArr": [
    {
      "key": "clients.generateFromURL",
      "method": "GET",
      "path": "/generate"
    },
    {
      "key": "servers.generateFromURL",
      "method": "GET",
      "path": "/generate"
    },
    {
      "key": "documentation.generateFromURL",
      "method": "GET",
      "path": "/generate"
    },
    {
      "key": "config.generateFromURL",
      "method": "GET",
      "path": "/generate"
    },
    {
      "key": "clients.generate",
      "method": "POST",
      "path": "/generate"
    },
    {
      "key": "servers.generate",
      "method": "POST",
      "path": "/generate"
    },
    {
      "key": "documentation.generate",
      "method": "POST",
      "path": "/generate"
    },
    {
      "key": "config.generate",
      "method": "POST",
      "path": "/generate"
    },
    {
      "key": "clients.clientLanguages",
      "method": "GET",
      "path": "/clients"
    },
    {
      "key": "documentation.clientLanguages",
      "method": "GET",
      "path": "/clients"
    },
    {
      "key": "servers.serverLanguages",
      "method": "GET",
      "path": "/servers"
    },
    {
      "key": "documentation.documentationLanguages",
      "method": "GET",
      "path": "/documentation"
    },
    {
      "key": "clients.languages",
      "method": "GET",
      "path": "/{type}/{version}"
    },
    {
      "key": "servers.languages",
      "method": "GET",
      "path": "/{type}/{version}"
    },
    {
      "key": "documentation.languages",
      "method": "GET",
      "path": "/{type}/{version}"
    },
    {
      "key": "config.languages",
      "method": "GET",
      "path": "/{type}/{version}"
    },
    {
      "key": "clients.languagesMulti",
      "method": "GET",
      "path": "/types"
    },
    {
      "key": "servers.languagesMulti",
      "method": "GET",
      "path": "/types"
    },
    {
      "key": "documentation.languagesMulti",
      "method": "GET",
      "path": "/types"
    },
    {
      "key": "config.languagesMulti",
      "method": "GET",
      "path": "/types"
    },
    {
      "key": "clients.listOptions",
      "method": "GET",
      "path": "/options"
    },
    {
      "key": "servers.listOptions",
      "method": "GET",
      "path": "/options"
    },
    {
      "key": "documentation.listOptions",
      "method": "GET",
      "path": "/options"
    },
    {
      "key": "config.listOptions",
      "method": "GET",
      "path": "/options"
    },
    {
      "key": "clients.generateBundle",
      "method": "POST",
      "path": "/model"
    },
    {
      "key": "servers.generateBundle",
      "method": "POST",
      "path": "/model"
    },
    {
      "key": "documentation.generateBundle",
      "method": "POST",
      "path": "/model"
    },
    {
      "key": "config.generateBundle",
      "method": "POST",
      "path": "/model"
    },
    {
      "key": "documentation.renderTemplate",
      "method": "POST",
      "path": "/render"
    }
  ],
  "pathApis": [
    {
      "tag": "clients",
      "apis": [
        {
          "method": "GET",
          "summary": "Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.",
          "path": "/generate",
          "name": "generateFromURL",
          "responseName": "string",
          "requestName": "",
          "pathKey": "clients.generateFromURL",
          "queryParameters": "{\n  /**\n   * [required]\n   */\n  codegenOptionsURL: string\n}",
          "queryParametersComment": "{\n       *   // [required]\n       *   codegenOptionsURL: string\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates and download code. GenerationRequest input provided as request body.",
          "path": "/generate",
          "name": "generate",
          "responseName": "string",
          "requestName": "GenerationRequest",
          "pathKey": "clients.generate",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        },
        {
          "method": "GET",
          "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)",
          "path": "/clients",
          "name": "clientLanguages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "clients.clientLanguages",
          "queryParameters": "{\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n  /**\n   * flag to only return languages of type `client`\n   */\n  clientOnly?: boolean\n}",
          "queryParametersComment": "{\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       *   // flag to only return languages of type `client`\n       *   clientOnly?: boolean\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of the given type and version",
          "path": "/{type}/{version}",
          "name": "languages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "clients.languages",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * generator type\n   * [required]\n   */\n  type: 'client' | 'server' | 'documentation' | 'config'\n  /**\n   * generator version used by codegen engine\n   * [required]\n   */\n  version: 'V2' | 'V3'\n}",
          "pathParametersComment": "{\n       *   // generator type\n       *   // [required]\n       *   type: 'client' | 'server' | 'documentation' | 'config'\n       *   // generator version used by codegen engine\n       *   // [required]\n       *   version: 'V2' | 'V3'\n       * }",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages",
          "path": "/types",
          "name": "languagesMulti",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "clients.languagesMulti",
          "queryParameters": "{\n  /**\n   * comma-separated list of generator types\n   * [required]\n   */\n  types: ('client' | 'server' | 'documentation' | 'config')[]\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // comma-separated list of generator types\n       *   // [required]\n       *   types: ('client' | 'server' | 'documentation' | 'config')[]\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Returns options for a given language and version (defaults to V3)",
          "path": "/options",
          "name": "listOptions",
          "responseName": "object",
          "requestName": "",
          "pathKey": "clients.listOptions",
          "queryParameters": "{\n  /**\n   * language\n   */\n  language?: string\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // language\n       *   language?: string\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates the intermediate model (\"bundle\") and returns it as a JSON. body.",
          "path": "/model",
          "name": "generateBundle",
          "responseName": "object",
          "requestName": "GenerationRequest",
          "pathKey": "clients.generateBundle",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        }
      ]
    },
    {
      "tag": "servers",
      "apis": [
        {
          "method": "GET",
          "summary": "Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.",
          "path": "/generate",
          "name": "generateFromURL",
          "responseName": "string",
          "requestName": "",
          "pathKey": "servers.generateFromURL",
          "queryParameters": "{\n  /**\n   * [required]\n   */\n  codegenOptionsURL: string\n}",
          "queryParametersComment": "{\n       *   // [required]\n       *   codegenOptionsURL: string\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates and download code. GenerationRequest input provided as request body.",
          "path": "/generate",
          "name": "generate",
          "responseName": "string",
          "requestName": "GenerationRequest",
          "pathKey": "servers.generate",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        },
        {
          "method": "GET",
          "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)",
          "path": "/servers",
          "name": "serverLanguages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "servers.serverLanguages",
          "queryParameters": "{\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of the given type and version",
          "path": "/{type}/{version}",
          "name": "languages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "servers.languages",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * generator type\n   * [required]\n   */\n  type: 'client' | 'server' | 'documentation' | 'config'\n  /**\n   * generator version used by codegen engine\n   * [required]\n   */\n  version: 'V2' | 'V3'\n}",
          "pathParametersComment": "{\n       *   // generator type\n       *   // [required]\n       *   type: 'client' | 'server' | 'documentation' | 'config'\n       *   // generator version used by codegen engine\n       *   // [required]\n       *   version: 'V2' | 'V3'\n       * }",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages",
          "path": "/types",
          "name": "languagesMulti",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "servers.languagesMulti",
          "queryParameters": "{\n  /**\n   * comma-separated list of generator types\n   * [required]\n   */\n  types: ('client' | 'server' | 'documentation' | 'config')[]\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // comma-separated list of generator types\n       *   // [required]\n       *   types: ('client' | 'server' | 'documentation' | 'config')[]\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Returns options for a given language and version (defaults to V3)",
          "path": "/options",
          "name": "listOptions",
          "responseName": "object",
          "requestName": "",
          "pathKey": "servers.listOptions",
          "queryParameters": "{\n  /**\n   * language\n   */\n  language?: string\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // language\n       *   language?: string\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates the intermediate model (\"bundle\") and returns it as a JSON. body.",
          "path": "/model",
          "name": "generateBundle",
          "responseName": "object",
          "requestName": "GenerationRequest",
          "pathKey": "servers.generateBundle",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        }
      ]
    },
    {
      "tag": "documentation",
      "apis": [
        {
          "method": "GET",
          "summary": "Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.",
          "path": "/generate",
          "name": "generateFromURL",
          "responseName": "string",
          "requestName": "",
          "pathKey": "documentation.generateFromURL",
          "queryParameters": "{\n  /**\n   * [required]\n   */\n  codegenOptionsURL: string\n}",
          "queryParametersComment": "{\n       *   // [required]\n       *   codegenOptionsURL: string\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates and download code. GenerationRequest input provided as request body.",
          "path": "/generate",
          "name": "generate",
          "responseName": "string",
          "requestName": "GenerationRequest",
          "pathKey": "documentation.generate",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        },
        {
          "method": "GET",
          "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)",
          "path": "/clients",
          "name": "clientLanguages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "documentation.clientLanguages",
          "queryParameters": "{\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n  /**\n   * flag to only return languages of type `client`\n   */\n  clientOnly?: boolean\n}",
          "queryParametersComment": "{\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       *   // flag to only return languages of type `client`\n       *   clientOnly?: boolean\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)",
          "path": "/documentation",
          "name": "documentationLanguages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "documentation.documentationLanguages",
          "queryParameters": "{\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of the given type and version",
          "path": "/{type}/{version}",
          "name": "languages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "documentation.languages",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * generator type\n   * [required]\n   */\n  type: 'client' | 'server' | 'documentation' | 'config'\n  /**\n   * generator version used by codegen engine\n   * [required]\n   */\n  version: 'V2' | 'V3'\n}",
          "pathParametersComment": "{\n       *   // generator type\n       *   // [required]\n       *   type: 'client' | 'server' | 'documentation' | 'config'\n       *   // generator version used by codegen engine\n       *   // [required]\n       *   version: 'V2' | 'V3'\n       * }",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages",
          "path": "/types",
          "name": "languagesMulti",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "documentation.languagesMulti",
          "queryParameters": "{\n  /**\n   * comma-separated list of generator types\n   * [required]\n   */\n  types: ('client' | 'server' | 'documentation' | 'config')[]\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // comma-separated list of generator types\n       *   // [required]\n       *   types: ('client' | 'server' | 'documentation' | 'config')[]\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Returns options for a given language and version (defaults to V3)",
          "path": "/options",
          "name": "listOptions",
          "responseName": "object",
          "requestName": "",
          "pathKey": "documentation.listOptions",
          "queryParameters": "{\n  /**\n   * language\n   */\n  language?: string\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // language\n       *   language?: string\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates the intermediate model (\"bundle\") and returns it as a JSON. body.",
          "path": "/model",
          "name": "generateBundle",
          "responseName": "object",
          "requestName": "GenerationRequest",
          "pathKey": "documentation.generateBundle",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        },
        {
          "method": "POST",
          "summary": "render a template using the provided data",
          "path": "/render",
          "name": "renderTemplate",
          "responseName": "unknown",
          "requestName": "RenderRequest",
          "pathKey": "documentation.renderTemplate",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "unknown",
          "requestComment": "{\n*  // template as string\n*  // [required]\n*  template: string\n*  // context as string\n*  // [required]\n*  context: string\n*}"
        }
      ]
    },
    {
      "tag": "config",
      "apis": [
        {
          "method": "GET",
          "summary": "Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.",
          "path": "/generate",
          "name": "generateFromURL",
          "responseName": "string",
          "requestName": "",
          "pathKey": "config.generateFromURL",
          "queryParameters": "{\n  /**\n   * [required]\n   */\n  codegenOptionsURL: string\n}",
          "queryParametersComment": "{\n       *   // [required]\n       *   codegenOptionsURL: string\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates and download code. GenerationRequest input provided as request body.",
          "path": "/generate",
          "name": "generate",
          "responseName": "string",
          "requestName": "GenerationRequest",
          "pathKey": "config.generate",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        },
        {
          "method": "GET",
          "summary": "List generator languages of the given type and version",
          "path": "/{type}/{version}",
          "name": "languages",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "config.languages",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "{\n  /**\n   * generator type\n   * [required]\n   */\n  type: 'client' | 'server' | 'documentation' | 'config'\n  /**\n   * generator version used by codegen engine\n   * [required]\n   */\n  version: 'V2' | 'V3'\n}",
          "pathParametersComment": "{\n       *   // generator type\n       *   // [required]\n       *   type: 'client' | 'server' | 'documentation' | 'config'\n       *   // generator version used by codegen engine\n       *   // [required]\n       *   version: 'V2' | 'V3'\n       * }",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages",
          "path": "/types",
          "name": "languagesMulti",
          "responseName": "string[]",
          "requestName": "",
          "pathKey": "config.languagesMulti",
          "queryParameters": "{\n  /**\n   * comma-separated list of generator types\n   * [required]\n   */\n  types: ('client' | 'server' | 'documentation' | 'config')[]\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // comma-separated list of generator types\n       *   // [required]\n       *   types: ('client' | 'server' | 'documentation' | 'config')[]\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "string[]",
          "requestComment": ""
        },
        {
          "method": "GET",
          "summary": "Returns options for a given language and version (defaults to V3)",
          "path": "/options",
          "name": "listOptions",
          "responseName": "object",
          "requestName": "",
          "pathKey": "config.listOptions",
          "queryParameters": "{\n  /**\n   * language\n   */\n  language?: string\n  /**\n   * generator version used by codegen engine\n   */\n  version?: 'V2' | 'V3'\n}",
          "queryParametersComment": "{\n       *   // language\n       *   language?: string\n       *   // generator version used by codegen engine\n       *   version?: 'V2' | 'V3'\n       * }",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": ""
        },
        {
          "method": "POST",
          "summary": "Generates the intermediate model (\"bundle\") and returns it as a JSON. body.",
          "path": "/model",
          "name": "generateBundle",
          "responseName": "object",
          "requestName": "GenerationRequest",
          "pathKey": "config.generateBundle",
          "queryParameters": "",
          "queryParametersComment": "",
          "pathParameters": "",
          "pathParametersComment": "",
          "responseComment": "object",
          "requestComment": "{\n*  // language to generate (required)\n*  // [required]\n*  lang: string\n*  // spec in json format. . Alternative to `specURL`\n*  spec?: object\n*  // URL of the spec in json format. Alternative to `spec`\n*  specURL?: string\n*  // type of the spec\n*  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'\n*  // codegen version to use\n*  codegenVersion?: 'V2' | 'V3'\n*  options?: {\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n*    auth?: string\n*    // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n*    authorizationValue?: {\n*      // Authorization value\n*      value?: string\n*      // Authorization key\n*      keyName?: string\n*      // Authorization type\n*      type?: 'query' | 'header'\n*    }\n*    // package for generated api classes\n*    apiPackage?: string\n*    // template version for generation\n*    templateVersion?: string\n*    // package for generated models\n*    modelPackage?: string\n*    // Prefix that will be prepended to all model names. Default is the empty string.\n*    modelNamePrefix?: string\n*    // PrefixSuffix that will be appended to all model names. Default is the empty string.\n*    modelNameSuffix?: string\n*    // sets specified system properties in key/value format\n*    systemProperties?: object\n*    // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n*    instantiationTypes?: object\n*    // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n*    typeMappings?: object\n*    // sets additional properties that can be referenced by the mustache templates in key/value format.\n*    additionalProperties?: object\n*    // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n*    languageSpecificPrimitives?: string[]\n*    // specifies mappings between a given class and the import that should be used for that class in key/value format.\n*    importMappings?: object\n*    // root package for generated code\n*    invokerPackage?: string\n*    // groupId in generated pom.xml\n*    groupId?: string\n*    // artifactId in generated pom.xml\n*    artifactId?: string\n*    // artifact version generated in pom.xml\n*    artifactVersion?: string\n*    // library template (sub-template)\n*    library?: string\n*    // Git user ID, e.g. swagger-api.\n*    gitUserId?: string\n*    // Git repo ID, e.g. swagger-codegen.\n*    gitRepoId?: string\n*    // Release note, default to 'Minor update'.\n*    releaseNote?: string\n*    // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n*    httpUserAgent?: string\n*    // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n*    reservedWordsMappings?: object\n*    // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n*    ignoreFileOverride?: string\n*    // Remove prefix of operationId, e.g. config_getId => getId\n*    removeOperationIdPrefix?: boolean\n*    skipOverride?: boolean\n*  }\n*}"
        }
      ]
    }
  ],
  "commentText": "/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Swagger Generator - version 3.0.57\r\n *\r\n * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\r\n *\r\n * OpenAPI version: 3.0.1\r\n *\r\n *\r\n * NOTE: This file is auto generated by the alova's vscode plugin.\r\n *\r\n * https://alova.js.org/devtools/vscode\r\n *\r\n * **Do not edit the file manually.**\r\n */",
  "schemas": [
    "export interface GenerationRequest {\n  /**\n   * language\n   * ---\n   * language to generate (required)\n   */\n  lang: string;\n  /**\n   * spec in json format. . Alternative to `specURL`\n   */\n  spec?: {};\n  /**\n   * URL of the spec in json format. Alternative to `spec`\n   */\n  specURL?: string;\n  /**\n   * type of the spec\n   */\n  type?: \"CLIENT\" | \"SERVER\" | \"DOCUMENTATION\" | \"CONFIG\";\n  /**\n   * codegen version to use\n   */\n  codegenVersion?: \"V2\" | \"V3\";\n  options?: Options;\n}\n",
    "/**\n * authorization\n * ---\n * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object\n */\nexport interface AuthorizationValue {\n  /**\n   * Authorization value\n   */\n  value?: string;\n  /**\n   * Authorization key\n   */\n  keyName?: string;\n  /**\n   * Authorization type\n   */\n  type?: \"query\" | \"header\";\n}\n",
    "export interface Options {\n  /**\n   * authorization\n   * ---\n   * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\n   */\n  auth?: string;\n  authorizationValue?: AuthorizationValue;\n  /**\n   * api package\n   * ---\n   * package for generated api classes\n   */\n  apiPackage?: string;\n  /**\n   * Template Version\n   * ---\n   * template version for generation\n   */\n  templateVersion?: string;\n  /**\n   * model package\n   * ---\n   * package for generated models\n   */\n  modelPackage?: string;\n  /**\n   * model name prefix\n   * ---\n   * Prefix that will be prepended to all model names. Default is the empty string.\n   */\n  modelNamePrefix?: string;\n  /**\n   * model name suffix\n   * ---\n   * PrefixSuffix that will be appended to all model names. Default is the empty string.\n   */\n  modelNameSuffix?: string;\n  /**\n   * System Properties\n   * ---\n   * sets specified system properties in key/value format\n   */\n  systemProperties?: {\n    [k: string]: string;\n  };\n  /**\n   * instantiation types\n   * ---\n   * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.\n   */\n  instantiationTypes?: {\n    [k: string]: string;\n  };\n  /**\n   * type mappings\n   * ---\n   * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.\n   */\n  typeMappings?: {\n    [k: string]: string;\n  };\n  /**\n   * additional properties\n   * ---\n   * sets additional properties that can be referenced by the mustache templates in key/value format.\n   */\n  additionalProperties?: {\n    [k: string]: {};\n  };\n  /**\n   * language specific primitives\n   * ---\n   * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.\n   */\n  languageSpecificPrimitives?: string[];\n  /**\n   * import mappings\n   * ---\n   * specifies mappings between a given class and the import that should be used for that class in key/value format.\n   */\n  importMappings?: {\n    [k: string]: string;\n  };\n  /**\n   * invoker package\n   * ---\n   * root package for generated code\n   */\n  invokerPackage?: string;\n  /**\n   * group id\n   * ---\n   * groupId in generated pom.xml\n   */\n  groupId?: string;\n  /**\n   * artifact id\n   * ---\n   * artifactId in generated pom.xml\n   */\n  artifactId?: string;\n  /**\n   * artifact version\n   * ---\n   * artifact version generated in pom.xml\n   */\n  artifactVersion?: string;\n  /**\n   * library\n   * ---\n   * library template (sub-template)\n   */\n  library?: string;\n  /**\n   * git user id\n   * ---\n   * Git user ID, e.g. swagger-api.\n   */\n  gitUserId?: string;\n  /**\n   * git repo id\n   * ---\n   * Git repo ID, e.g. swagger-codegen.\n   */\n  gitRepoId?: string;\n  /**\n   * release note\n   * ---\n   * Release note, default to 'Minor update'.\n   */\n  releaseNote?: string;\n  /**\n   * http user agent\n   * ---\n   * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'\n   */\n  httpUserAgent?: string;\n  /**\n   * reserved words mappings\n   * ---\n   * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.\n   */\n  reservedWordsMappings?: {\n    [k: string]: string;\n  };\n  /**\n   * ignore file override location\n   * ---\n   * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.\n   */\n  ignoreFileOverride?: string;\n  /**\n   * remove prefix of the operationId\n   * ---\n   * Remove prefix of operationId, e.g. config_getId => getId\n   */\n  removeOperationIdPrefix?: boolean;\n  skipOverride?: boolean;\n}\n",
    "export interface CliOption {\n  optionName?: string;\n  description?: string;\n  /**\n   * Data type is based on the types supported by the JSON-Schema\n   */\n  type?: string;\n  enum?: {\n    [k: string]: string;\n  };\n  default?: string;\n}\n",
    "export interface RenderRequest {\n  /**\n   * template\n   * ---\n   * template as string\n   */\n  template: string;\n  /**\n   * context\n   * ---\n   * context as string\n   */\n  context: string;\n}\n",
    "export interface RenderResponse {\n  value: string;\n}\n"
  ],
  "vue": true
}
